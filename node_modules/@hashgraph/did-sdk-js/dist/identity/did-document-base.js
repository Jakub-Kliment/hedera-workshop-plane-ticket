"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DidDocumentBase = void 0;
const did_syntax_1 = require("./did-syntax");
const did_document_json_properties_1 = require("./did-document-json-properties");
const hcs_did_root_key_1 = require("./hcs/did/hcs-did-root-key");
class DidDocumentBase {
    constructor(did) {
        this.id = did;
        this.context = did_syntax_1.DidSyntax.DID_DOCUMENT_CONTEXT;
    }
    static fromJson(json) {
        let result;
        try {
            const root = JSON.parse(json);
            result = new DidDocumentBase(root.id);
            if (root.hasOwnProperty(did_document_json_properties_1.DidDocumentJsonProperties.PUBLIC_KEY)) {
                if (!Array.isArray(root[did_document_json_properties_1.DidDocumentJsonProperties.PUBLIC_KEY])) {
                    throw new Error(`${root[did_document_json_properties_1.DidDocumentJsonProperties.PUBLIC_KEY]} is not an array`);
                }
                for (let publicKeyObj of root[did_document_json_properties_1.DidDocumentJsonProperties.PUBLIC_KEY]) {
                    if (publicKeyObj.hasOwnProperty(did_document_json_properties_1.DidDocumentJsonProperties.ID) && (publicKeyObj[did_document_json_properties_1.DidDocumentJsonProperties.ID] ===
                        (result.getId() + hcs_did_root_key_1.HcsDidRootKey.DID_ROOT_KEY_NAME))) {
                        const didRootKey = hcs_did_root_key_1.HcsDidRootKey.fromJsonTree(publicKeyObj);
                        result.setDidRootKey(didRootKey);
                        break;
                    }
                }
            }
        }
        catch (e) {
            throw new Error('Given JSON string is not a valid DID document ' + e.message);
        }
        return result;
    }
    getContext() {
        return this.context;
    }
    getId() {
        return this.id;
    }
    getDidRootKey() {
        return this.didRootKey;
    }
    setDidRootKey(rootKey) {
        this.didRootKey = rootKey;
    }
    toJsonTree() {
        const rootObject = {};
        rootObject[did_document_json_properties_1.DidDocumentJsonProperties.CONTEXT] = this.context;
        rootObject[did_document_json_properties_1.DidDocumentJsonProperties.ID] = this.id;
        rootObject[did_document_json_properties_1.DidDocumentJsonProperties.PUBLIC_KEY] = [
            this.didRootKey.toJsonTree()
        ];
        rootObject[did_document_json_properties_1.DidDocumentJsonProperties.AUTHENTICATION] = [
            this.didRootKey.getId()
        ];
        return rootObject;
    }
    toJSON() {
        return JSON.stringify(this.toJsonTree());
    }
}
exports.DidDocumentBase = DidDocumentBase;
