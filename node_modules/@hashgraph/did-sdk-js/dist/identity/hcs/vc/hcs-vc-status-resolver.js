"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HcsVcStatusResolver = void 0;
const timestamp_utils_1 = require("../../../utils/timestamp-utils");
const message_resolver_1 = require("../message-resolver");
const hcs_vc_operation_1 = require("./hcs-vc-operation");
const hcs_vc_topic_listener_1 = require("./hcs-vc-topic-listener");
/**
 * Resolves the DID from Hedera network.
 */
class HcsVcStatusResolver extends message_resolver_1.MessageResolver {
    constructor(...args) {
        const topicId = args[0];
        super(topicId);
        if (args[1]) {
            this.publicKeysProvider = args[1];
        }
        else {
            this.publicKeysProvider = null;
        }
    }
    /**
     * Adds a credential hash to resolve its status.
     *
     * @param credentialHash The credential hash string.
     * @return This resolver instance.
     */
    addCredentialHash(credentialHash) {
        if (credentialHash != null) {
            this.results.set(credentialHash, null);
        }
        return this;
    }
    /**
     * Adds multiple VC hashes to resolve.
     *
     * @param hashes The set of VC hash strings.
     * @return This resolver instance.
     */
    addCredentialHashes(hashes) {
        if (hashes != null) {
            hashes.forEach(d => this.addCredentialHash(d));
        }
        return this;
    }
    matchesSearchCriteria(message) {
        return this.results.has(message.getCredentialHash());
    }
    supplyMessageListener() {
        return new hcs_vc_topic_listener_1.HcsVcTopicListener(this.topicId, this.publicKeysProvider);
    }
    processMessage(envelope) {
        const message = envelope.open();
        // Skip messages that are older than the once collected or if we already have a REVOKED message
        const existing = this.results.get(message.getCredentialHash());
        const chackOperation = ((existing != null) &&
            ((timestamp_utils_1.TimestampUtils.lessThan(envelope.getConsensusTimestamp(), existing.getConsensusTimestamp())) ||
                (hcs_vc_operation_1.HcsVcOperation.REVOKE == (existing.open().getOperation()) &&
                    hcs_vc_operation_1.HcsVcOperation.REVOKE != (message.getOperation()))));
        if (chackOperation) {
            return;
        }
        // Add valid message to the results
        this.results.set(message.getCredentialHash(), envelope);
    }
}
exports.HcsVcStatusResolver = HcsVcStatusResolver;
