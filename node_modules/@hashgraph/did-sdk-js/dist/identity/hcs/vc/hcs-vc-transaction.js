"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HcsVcTransaction = void 0;
const message_transaction_1 = require("../message-transaction");
const hcs_vc_message_1 = require("./hcs-vc-message");
const sdk_1 = require("@hashgraph/sdk");
const message_envelope_1 = require("../message-envelope");
const hcs_vc_topic_listener_1 = require("./hcs-vc-topic-listener");
/**
 * The DID document creation, update or deletion transaction.
 * Builds a correct {@link HcsDidMessage} and send it to HCS DID topic.
 */
class HcsVcTransaction extends message_transaction_1.MessageTransaction {
    constructor(...args) {
        if ((args.length === 4) &&
            (args[0] instanceof sdk_1.TopicId) &&
            // (args[1] instanceof HcsVcOperation) &&
            (typeof args[2] === 'string') &&
            (args[3] instanceof sdk_1.PublicKey)) {
            const [topicId, operation, credentialHash, signerPublicKey] = args;
            super(topicId);
            this.operation = operation;
            this.credentialHash = credentialHash;
            this.signerPublicKey = signerPublicKey;
        }
        else if ((args.length === 3) &&
            (args[0] instanceof sdk_1.TopicId) &&
            (args[1] instanceof message_envelope_1.MessageEnvelope) &&
            (args[2] instanceof sdk_1.PublicKey)) {
            const [topicId, message, signerPublicKey] = args;
            super(topicId, message);
            this.signerPublicKey = signerPublicKey;
            this.operation = null;
            this.credentialHash = null;
        }
    }
    validate(validator) {
        super.validate(validator);
        validator.require(!!this.credentialHash || !!this.message, 'Verifiable credential hash is null or empty.');
        validator.require(!!this.operation || !!this.message, 'Operation on verifiable credential is not defined.');
    }
    buildMessage() {
        return hcs_vc_message_1.HcsVcMessage.fromCredentialHash(this.credentialHash, this.operation);
    }
    provideTopicListener(topicIdToListen) {
        return new hcs_vc_topic_listener_1.HcsVcTopicListener(topicIdToListen, (s) => {
            return [this.signerPublicKey];
        });
    }
    provideMessageEncrypter(encryptionFunction) {
        return hcs_vc_message_1.HcsVcMessage.getEncrypter(encryptionFunction);
    }
}
exports.HcsVcTransaction = HcsVcTransaction;
