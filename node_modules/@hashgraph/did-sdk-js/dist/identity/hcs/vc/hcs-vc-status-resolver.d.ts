import { TopicId } from "@hashgraph/sdk";
import { MessageEnvelope } from "../message-envelope";
import { MessageListener } from "../message-listener";
import { MessageResolver } from "../message-resolver";
import { HcsVcMessage } from "./hcs-vc-message";
import { PublicKeysProvider } from "./hcs-vc-topic-listener";
/**
 * Resolves the DID from Hedera network.
 */
export declare class HcsVcStatusResolver extends MessageResolver<HcsVcMessage> {
    /**
     * A function providing a collection of public keys accepted for a given credential hash.
     * If the function is not supplied, the listener will not validate signatures.
     */
    private publicKeysProvider;
    /**
     * Instantiates a new status resolver for the given VC topic.
     *
     * @param topicId The HCS VC topic ID.
     */
    constructor(topicId: TopicId);
    /**
     * Instantiates a new status resolver for the given VC topic with signature validation.
     *
     * @param topicId            The VC consensus topic ID.
     * @param publicKeysProvider Provider of a public keys acceptable for a given VC hash.
     */
    constructor(topicId: TopicId, publicKeysProvider: PublicKeysProvider);
    /**
     * Adds a credential hash to resolve its status.
     *
     * @param credentialHash The credential hash string.
     * @return This resolver instance.
     */
    addCredentialHash(credentialHash: string): HcsVcStatusResolver;
    /**
     * Adds multiple VC hashes to resolve.
     *
     * @param hashes The set of VC hash strings.
     * @return This resolver instance.
     */
    addCredentialHashes(hashes: string[]): HcsVcStatusResolver;
    protected matchesSearchCriteria(message: HcsVcMessage): boolean;
    protected supplyMessageListener(): MessageListener<HcsVcMessage>;
    protected processMessage(envelope: MessageEnvelope<HcsVcMessage>): void;
}
