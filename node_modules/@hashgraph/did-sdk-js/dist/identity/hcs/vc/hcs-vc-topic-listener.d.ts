import { PublicKey, TopicId, TopicMessage } from "@hashgraph/sdk";
import { MessageEnvelope } from "../message-envelope";
import { MessageListener } from "../message-listener";
import { HcsVcMessage } from "./hcs-vc-message";
export declare type PublicKeysProvider = (t: string) => PublicKey[];
/**
 * A listener of confirmed {@link HcsVcMessage} messages from a VC topic.
 * Messages are received from a given mirror node, parsed and validated.
 */
export declare class HcsVcTopicListener extends MessageListener<HcsVcMessage> {
    /**
     * A function providing a collection of public keys accepted for a given credential hash.
     * If the function is not supplied, the listener will not validate signatures.
     */
    private publicKeysProvider;
    /**
     * Creates a new instance of a VC topic listener for the given consensus topic.
     * By default, invalid messages are ignored and errors are not.
     * Listener without a public key provider will not validate message signatures.
     *
     * @param vcTopicId The VC consensus topic ID.
     */
    constructor(vcTopicId: TopicId);
    /**
     * Creates a new instance of a VC topic listener for the given consensus topic.
     * By default, invalid messages are ignored and errors are not.
     *
     * @param vcTopicId          The VC consensus topic ID.
     * @param publicKeysProvider Provider of a public keys acceptable for a given VC hash.
     */
    constructor(vcTopicId: TopicId, publicKeysProvider: PublicKeysProvider);
    protected extractMessage(response: TopicMessage): MessageEnvelope<HcsVcMessage>;
    protected isMessageValid(envelope: MessageEnvelope<HcsVcMessage>, response: TopicMessage): boolean;
    /**
     * Checks if the signature on the envelope is accepted by any public key supplied for the credential hash.
     *
     * @param envelope The message envelope.
     * @return True if signature is accepted, false otherwise.
     */
    private isSignatureAccepted;
}
