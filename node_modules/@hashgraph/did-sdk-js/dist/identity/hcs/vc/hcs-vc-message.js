"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HcsVcMessage = void 0;
const hashing_1 = require("../../../utils/hashing");
const message_1 = require("../message");
const message_envelope_1 = require("../message-envelope");
class HcsVcMessage extends message_1.Message {
    /**
     * Creates a new message instance.
     *
     * @param operation      Operation type.
     * @param credentialHash Credential hash.
     */
    constructor(operation, credentialHash) {
        super();
        this.operation = operation;
        this.credentialHash = credentialHash;
    }
    /**
     * Checks if the message is valid from content point of view.
     * Does not verify hash nor any signatures.
     *
     * @return True if the message is valid and False otherwise.
     */
    isValid() {
        return (!!this.credentialHash && !!this.operation);
    }
    getOperation() {
        return this.operation;
    }
    getCredentialHash() {
        return this.credentialHash;
    }
    toJsonTree() {
        const result = super.toJsonTree();
        result.operation = this.operation;
        result.credentialHash = this.credentialHash;
        return result;
    }
    static fromJsonTree(tree, result) {
        if (!result) {
            result = new HcsVcMessage(tree.operation, tree.credentialHash);
        }
        else {
            result.operation = tree.operation;
            result.credentialHash = tree.credentialHash;
        }
        result = super.fromJsonTree(tree, result);
        return result;
    }
    toJSON() {
        return JSON.stringify(this.toJsonTree());
    }
    static fromJson(json) {
        return message_1.Message.fromJsonTree(JSON.parse(json));
    }
    /**
     * Creates a new VC message for submission to HCS topic.
     *
     * @param credentialHash VC hash.
     * @param operation      The operation on a VC document.
     * @return The HCS message wrapped in an envelope for the given VC and operation.
     */
    static fromCredentialHash(credentialHash, operation) {
        const message = new HcsVcMessage(operation, credentialHash);
        return new message_envelope_1.MessageEnvelope(message);
    }
    /**
     * Provides an encryption operator that converts an {@link HcsVcMessage} into encrypted one.
     *
     * @param encryptionFunction The encryption function to use for encryption of single attributes.
     * @return The encryption operator instance.
     */
    static getEncrypter(encryptionFunction) {
        if (encryptionFunction == null) {
            throw "Encryption function is missing or null.";
        }
        return function (message) {
            // Encrypt the credential hash
            const encryptedHash = encryptionFunction(message.getCredentialHash());
            const hash = hashing_1.Hashing.base64.encode(encryptedHash);
            return new HcsVcMessage(message.getOperation(), hash);
        };
    }
    /**
     * Provides a decryption function that converts {@link HcsVcMessage} in encrypted for into a plain form.
     *
     * @param decryptionFunction The decryption function to use for decryption of single attributes.
     * @return The decryption function for the {@link HcsVcMessage}
     */
    static getDecrypter(decryptionFunction) {
        if (decryptionFunction == null) {
            throw "Decryption function is missing or null.";
        }
        return function (encryptedMsg, consensusTimestamp) {
            // Decrypt DID string
            let decryptedHash = encryptedMsg.getCredentialHash();
            if (decryptedHash != null) {
                const hash = hashing_1.Hashing.base64.decode(decryptedHash);
                decryptedHash = decryptionFunction(hash, consensusTimestamp);
            }
            return new HcsVcMessage(encryptedMsg.getOperation(), decryptedHash);
        };
    }
}
exports.HcsVcMessage = HcsVcMessage;
