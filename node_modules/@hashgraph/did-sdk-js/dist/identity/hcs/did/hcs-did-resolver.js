"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HcsDidResolver = void 0;
const timestamp_utils_1 = require("../../../utils/timestamp-utils");
const did_method_operation_1 = require("../../did-method-operation");
const message_resolver_1 = require("../message-resolver");
const hcs_did_topic_listener_1 = require("./hcs-did-topic-listener");
/**
 * Resolves the DID from Hedera network.
 */
class HcsDidResolver extends message_resolver_1.MessageResolver {
    /**
     * Instantiates a new DID resolver for the given DID topic.
     *
     * @param topicId The HCS DID topic ID.
     */
    constructor(topicId) {
        super(topicId);
    }
    /**
    * Adds a DID to resolve.
    *
    * @param did The DID string.
    * @return This resolver instance.
    */
    addDid(did) {
        if (did != null) {
            this.results.set(did, null);
        }
        return this;
    }
    /**
     * Adds multiple DIDs to resolve.
     *
     * @param dids The set of DID strings.
     * @return This resolver instance.
     */
    addDids(dids) {
        if (dids) {
            dids.forEach(d => this.addDid(d));
        }
        return this;
    }
    matchesSearchCriteria(message) {
        return this.results.has(message.getDid());
    }
    processMessage(envelope) {
        const message = envelope.open();
        // Also skip messages that are older than the once collected or if we already have a DELETE message
        const existing = this.results.get(message.getDid());
        const chackOperation = ((existing != null) &&
            ((timestamp_utils_1.TimestampUtils.lessThan(envelope.getConsensusTimestamp(), existing.getConsensusTimestamp())) ||
                (did_method_operation_1.DidMethodOperation.DELETE == (existing.open().getOperation()) &&
                    did_method_operation_1.DidMethodOperation.DELETE != (message.getOperation()))));
        if (chackOperation) {
            return;
        }
        // Preserve created and updated timestamps
        message.setUpdated(envelope.getConsensusTimestamp());
        if (did_method_operation_1.DidMethodOperation.CREATE == message.getOperation()) {
            message.setCreated(envelope.getConsensusTimestamp());
        }
        else if (existing != null) {
            message.setCreated(existing.open().getCreated());
        }
        // Add valid message to the results
        this.results.set(message.getDid(), envelope);
    }
    supplyMessageListener() {
        return new hcs_did_topic_listener_1.HcsDidTopicListener(this.topicId);
    }
}
exports.HcsDidResolver = HcsDidResolver;
