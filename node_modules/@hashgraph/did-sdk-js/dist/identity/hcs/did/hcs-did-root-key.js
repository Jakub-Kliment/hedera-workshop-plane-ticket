"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HcsDidRootKey = void 0;
const bs58_1 = __importDefault(require("bs58"));
const hcs_did_1 = require("./hcs-did");
/**
 * Represents a root key of HCS Identity DID.
 * That is a public key of type Ed25519VerificationKey2018 compatible with a single publicKey entry of a DID Document.
 */
class HcsDidRootKey {
    /**
     * Creates a {@link HcsDidRootKey} object from the given {@link HcsDid} DID and it's root public key.
     *
     * @param did        The {@link HcsDid} DID object.
     * @param didRootKey The public key from which the DID was derived.
     * @return The {@link HcsDidRootKey} object.
     */
    static fromHcsIdentity(did, didRootKey) {
        if (!did) {
            throw new Error('DID cannot be ' + did);
        }
        if (!didRootKey) {
            throw new Error('DID root key cannot be ' + didRootKey);
        }
        if (hcs_did_1.HcsDid.publicKeyToIdString(didRootKey) !== did.getIdString()) {
            throw new Error('The specified DID does not correspond to the given DID root key');
        }
        const result = new HcsDidRootKey();
        result.controller = did.toDid();
        result.id = result.controller + HcsDidRootKey.DID_ROOT_KEY_NAME;
        result.publicKeyBase58 = bs58_1.default.encode(didRootKey.toBytes());
        result.type = HcsDidRootKey.DID_ROOT_KEY_TYPE;
        return result;
    }
    static fromId(id) {
        if (id == null) {
            throw new Error("id cannot be null");
        }
        const didString = id.replace(new RegExp(HcsDidRootKey.DID_ROOT_KEY_NAME + "$"), "");
        if (didString == null) {
            throw new Error("DID cannot be null");
        }
        const did = hcs_did_1.HcsDid.fromString(didString);
        const result = new HcsDidRootKey();
        result.controller = did.toDid();
        result.id = result.controller + this.DID_ROOT_KEY_NAME;
        result.publicKeyBase58 = null;
        result.type = this.DID_ROOT_KEY_TYPE;
        return result;
    }
    getId() {
        return this.id;
    }
    getType() {
        return this.type;
    }
    getController() {
        return this.controller;
    }
    getPublicKeyBase58() {
        return this.publicKeyBase58;
    }
    toJsonTree() {
        const result = {};
        result.id = this.id;
        result.type = this.type;
        result.controller = this.controller;
        result.publicKeyBase58 = this.publicKeyBase58;
        return result;
    }
    toJSON() {
        return JSON.stringify(this.toJsonTree());
    }
    static fromJsonTree(json) {
        const result = new HcsDidRootKey();
        result.id = json.id;
        result.type = json.type;
        result.controller = json.controller;
        result.publicKeyBase58 = json.publicKeyBase58;
        return result;
    }
    static fromJson(json) {
        return HcsDidRootKey.fromJsonTree(JSON.parse(json));
    }
}
exports.HcsDidRootKey = HcsDidRootKey;
HcsDidRootKey.DID_ROOT_KEY_NAME = '#did-root-key';
HcsDidRootKey.DID_ROOT_KEY_TYPE = 'Ed25519VerificationKey2018';
