"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HcsDidTopicListener = void 0;
const message_envelope_1 = require("../message-envelope");
const message_listener_1 = require("../message-listener");
const hcs_did_message_1 = require("./hcs-did-message");
/**
 * A listener of confirmed {@link HcsDidMessage} messages from a DID topic.
 * Messages are received from a given mirror node, parsed and validated.
 */
class HcsDidTopicListener extends message_listener_1.MessageListener {
    /**
     * Creates a new instance of a DID topic listener for the given consensus topic.
     * By default, invalid messages are ignored and errors are not.
     *
     * @param didTopicId The DID consensus topic ID.
     */
    constructor(didTopicId) {
        super(didTopicId);
    }
    extractMessage(response) {
        let result = null;
        try {
            result = message_envelope_1.MessageEnvelope.fromMirrorResponse(response, hcs_did_message_1.HcsDidMessage);
        }
        catch (err) {
            this.handleError(err);
        }
        return result;
    }
    isMessageValid(envelope, response) {
        try {
            const msgDecrypter = !!this.decrypter ? hcs_did_message_1.HcsDidMessage.getDecrypter(this.decrypter) : null;
            const message = envelope.open(msgDecrypter);
            if (!message) {
                this.reportInvalidMessage(response, "Empty message received when opening envelope");
                return false;
            }
            const key = message.extractDidRootKey();
            if (!envelope.isSignatureValid(key)) {
                this.reportInvalidMessage(response, "Signature validation failed");
                return false;
            }
            if (!message.isValid(this.topicId)) {
                this.reportInvalidMessage(response, "Message content validation failed.");
                return false;
            }
            return true;
        }
        catch (err) {
            this.handleError(err);
            this.reportInvalidMessage(response, "Exception while validating message: " + err.message);
            return false;
        }
    }
}
exports.HcsDidTopicListener = HcsDidTopicListener;
