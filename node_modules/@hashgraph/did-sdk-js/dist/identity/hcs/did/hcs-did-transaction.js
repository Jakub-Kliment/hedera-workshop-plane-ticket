"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HcsDidTransaction = void 0;
const message_transaction_1 = require("../message-transaction");
const hcs_did_message_1 = require("./hcs-did-message");
const sdk_1 = require("@hashgraph/sdk");
const message_envelope_1 = require("../message-envelope");
const hcs_did_topic_listener_1 = require("./hcs-did-topic-listener");
/**
 * The DID document creation, update or deletion transaction.
 * Builds a correct {@link HcsDidMessage} and send it to HCS DID topic.
 */
class HcsDidTransaction extends message_transaction_1.MessageTransaction {
    constructor(...args) {
        if ((args[0] instanceof message_envelope_1.MessageEnvelope) &&
            (args[1] instanceof sdk_1.TopicId) &&
            (args.length === 2)) {
            const [message, topicId] = args;
            super(topicId, message);
            this.operation = null;
        }
        else if (args.length === 2) {
            const [operation, topicId] = args;
            super(topicId);
            this.operation = operation;
        }
        else {
            throw new Error('Invalid arguments');
        }
    }
    /**
     * Sets a DID document as JSON string that will be submitted to HCS.
     *
     * @param didDocument The didDocument to be published.
     * @return This transaction instance.
     */
    setDidDocument(didDocument) {
        this.didDocument = didDocument;
        return this;
    }
    validate(validator) {
        super.validate(validator);
        validator.require(!!this.didDocument || !!this.message, 'DID document is mandatory.');
        validator.require(!!this.operation || !!this.message, 'DID method operation is not defined.');
    }
    buildMessage() {
        return hcs_did_message_1.HcsDidMessage.fromDidDocumentJson(this.didDocument, this.operation);
    }
    provideTopicListener(topicIdToListen) {
        return new hcs_did_topic_listener_1.HcsDidTopicListener(topicIdToListen);
    }
    provideMessageEncrypter(encryptionFunction) {
        return hcs_did_message_1.HcsDidMessage.getEncrypter(encryptionFunction);
    }
}
exports.HcsDidTransaction = HcsDidTransaction;
