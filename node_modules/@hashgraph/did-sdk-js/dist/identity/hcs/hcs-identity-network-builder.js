"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HcsIdentityNetworkBuilder = void 0;
const sdk_1 = require("@hashgraph/sdk");
const hcs_identity_network_1 = require("./hcs-identity-network");
const address_book_1 = require("./address-book");
class HcsIdentityNetworkBuilder {
    constructor() {
        this.maxTransactionFee = new sdk_1.Hbar(2);
        this.didTopicMemo = '';
        this.vcTopicMemo = '';
    }
    execute(client) {
        return __awaiter(this, void 0, void 0, function* () {
            const didTopicCreateTransaction = new sdk_1.TopicCreateTransaction()
                .setMaxTransactionFee(this.maxTransactionFee)
                .setTopicMemo(this.didTopicMemo);
            if (this.publicKey) {
                didTopicCreateTransaction.setAdminKey(this.publicKey);
            }
            const didTxId = yield didTopicCreateTransaction.execute(client);
            this.didTopicId = (yield didTxId.getReceipt(client)).topicId;
            const vcTopicCreateTransaction = new sdk_1.TopicCreateTransaction()
                .setMaxTransactionFee(this.maxTransactionFee)
                .setTopicMemo(this.vcTopicMemo);
            if (this.publicKey) {
                vcTopicCreateTransaction.setAdminKey(this.publicKey);
            }
            const vcTxId = yield vcTopicCreateTransaction.execute(client);
            this.vcTopicId = (yield vcTxId.getReceipt(client)).topicId;
            const addressBook = address_book_1.AddressBook.create(this.appnetName, this.didTopicId.toString(), this.vcTopicId.toString(), this.didServers);
            const fileCreateTx = new sdk_1.FileCreateTransaction().setContents(addressBook.toJSON());
            const response = yield fileCreateTx.execute(client);
            const receipt = yield response.getReceipt(client);
            const fileId = receipt.fileId;
            addressBook.setFileId(fileId);
            return hcs_identity_network_1.HcsIdentityNetwork.fromAddressBook(this.network, addressBook);
        });
    }
    addAppnetDidServer(serverUrl) {
        if (!this.didServers) {
            this.didServers = [];
        }
        if (this.didServers.indexOf(serverUrl) == -1) {
            this.didServers.push(serverUrl);
        }
        return this;
    }
    setAppnetName(appnetName) {
        this.appnetName = appnetName;
        return this;
    }
    setDidTopicMemo(didTopicMemo) {
        this.didTopicMemo = didTopicMemo;
        return this;
    }
    setVCTopicMemo(vcTopicMemo) {
        this.vcTopicMemo = vcTopicMemo;
        return this;
    }
    setDidTopicId(didTopicId) {
        this.didTopicId = didTopicId;
        return this;
    }
    setVCTopicId(vcTopicId) {
        this.vcTopicId = vcTopicId;
        return this;
    }
    setMaxTransactionFee(maxTransactionFee) {
        this.maxTransactionFee = maxTransactionFee;
        return this;
    }
    setPublicKey(publicKey) {
        this.publicKey = publicKey;
        return this;
    }
    setNetwork(network) {
        this.network = network;
        return this;
    }
}
exports.HcsIdentityNetworkBuilder = HcsIdentityNetworkBuilder;
