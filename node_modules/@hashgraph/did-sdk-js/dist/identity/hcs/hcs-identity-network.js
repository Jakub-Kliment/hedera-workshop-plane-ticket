"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HcsIdentityNetwork = void 0;
const address_book_1 = require("./address-book");
const sdk_1 = require("@hashgraph/sdk");
const hcs_did_1 = require("./did/hcs-did");
const hcs_did_transaction_1 = require("./did/hcs-did-transaction");
const message_envelope_1 = require("./message-envelope");
const hcs_vc_transaction_1 = require("./vc/hcs-vc-transaction");
const hcs_did_resolver_1 = require("./did/hcs-did-resolver");
const hcs_did_topic_listener_1 = require("./did/hcs-did-topic-listener");
const hcs_vc_status_resolver_1 = require("./vc/hcs-vc-status-resolver");
const hcs_vc_topic_listener_1 = require("./vc/hcs-vc-topic-listener");
/**
 * Appnet's identity network based on Hedera HCS DID method specification.
 */
class HcsIdentityNetwork {
    /**
     * Instantiates existing identity network from a provided address book.
     *
     * @param network     The Hedera network.
     * @param addressBook The {@link AddressBook} of the identity network.
     * @return The identity network instance.
     */
    static fromAddressBook(network, addressBook) {
        const result = new HcsIdentityNetwork();
        result.network = network;
        result.addressBook = addressBook;
        return result;
    }
    /**
     * Instantiates existing identity network using an address book file read from Hedera File Service.
     *
     * @param client            The Hedera network client.
     * @param network           The Hedera network.
     * @param addressBookFileId The FileID of {@link AddressBook} file stored on Hedera File Service.
     * @return The identity network instance.
     */
    static fromAddressBookFile(client, network, addressBookFileId) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileContentsQueryCost = (new sdk_1.FileContentsQuery()).setFileId(addressBookFileId).getCost(client);
            const fileQuery = (new sdk_1.FileContentsQuery()).setFileId(addressBookFileId);
            const contents = yield fileQuery.execute(client);
            const result = new HcsIdentityNetwork();
            result.network = network;
            result.addressBook = address_book_1.AddressBook.fromJson(contents.toString(), addressBookFileId);
            return result;
        });
    }
    /**
     * Instantiates existing identity network using a DID generated for this network.
     *
     * @param client The Hedera network client.
     * @param hcsDid The Hedera HCS DID.
     * @return The identity network instance.
     */
    static fromHcsDid(client, hcsDid) {
        return __awaiter(this, void 0, void 0, function* () {
            const addressBookFileId = hcsDid.getAddressBookFileId();
            return yield HcsIdentityNetwork.fromAddressBookFile(client, hcsDid.getNetwork(), addressBookFileId);
        });
    }
    createDidTransaction(...args) {
        if ((args.length === 1) &&
            (args[0] instanceof message_envelope_1.MessageEnvelope)) {
            const [message] = args;
            return new hcs_did_transaction_1.HcsDidTransaction(message, this.getDidTopicId());
        }
        else if ((args.length === 1)
        // (args[0] instanceof DidMethodOperation)
        ) {
            const [operation] = args;
            return new hcs_did_transaction_1.HcsDidTransaction(operation, this.getDidTopicId());
        }
        else {
            throw new Error('Invalid arguments');
        }
    }
    createVcTransaction(...args) {
        if ((args.length === 3) &&
            // (args[0] instanceof HcsVcOperation) &&
            (typeof args[1] === 'string') &&
            (args[2] instanceof sdk_1.PublicKey)) {
            const [operation, credentialHash, signerPublicKey] = args;
            return new hcs_vc_transaction_1.HcsVcTransaction(this.getVcTopicId(), operation, credentialHash, signerPublicKey);
        }
        else if ((args.length === 2) &&
            (args[0] instanceof message_envelope_1.MessageEnvelope) &&
            (args[1] instanceof sdk_1.PublicKey)) {
            const [message, signerPublicKey] = args;
            return new hcs_vc_transaction_1.HcsVcTransaction(this.getVcTopicId(), message, signerPublicKey);
        }
        else {
            throw new Error('Invalid arguments');
        }
    }
    /**
     * Returns the Hedera network on which this identity network runs.
     *
     * @return The Hedera network.
     */
    getNetwork() {
        return this.network;
    }
    generateDid(...args) {
        if ((args.length === 1) &&
            (typeof args[0] === 'boolean')) {
            const [withTid] = args;
            const privateKey = hcs_did_1.HcsDid.generateDidRootKey();
            const tid = withTid ? this.getDidTopicId() : null;
            return new hcs_did_1.HcsDid(this.getNetwork(), privateKey, this.addressBook.getFileId(), tid);
        }
        else if ((args.length === 2) &&
            (args[0] instanceof sdk_1.PublicKey) &&
            (typeof args[1] === 'boolean')) {
            const [publicKey, withTid] = args;
            const tid = withTid ? this.getDidTopicId() : null;
            return new hcs_did_1.HcsDid(this.getNetwork(), publicKey, this.addressBook.getFileId(), tid);
        }
        else if ((args.length === 2) &&
            (args[0] instanceof sdk_1.PrivateKey) &&
            (typeof args[1] === 'boolean')) {
            const [privateKey, withTid] = args;
            const tid = withTid ? this.getDidTopicId() : null;
            return new hcs_did_1.HcsDid(this.getNetwork(), privateKey, this.addressBook.getFileId(), tid);
        }
    }
    /**
     * Returns a DID resolver for this network.
     *
     * @return The DID resolver for this network.
     */
    getDidResolver() {
        return new hcs_did_resolver_1.HcsDidResolver(this.getDidTopicId());
    }
    /**
     * Returns DID topic ID for this network.
     *
     * @return The DID topic ID.
     */
    getDidTopicId() {
        return sdk_1.TopicId.fromString(this.addressBook.getDidTopicId());
    }
    /**
     * Returns a DID topic listener for this network.
     *
     * @return The DID topic listener.
     */
    getDidTopicListener() {
        return new hcs_did_topic_listener_1.HcsDidTopicListener(this.getDidTopicId());
    }
    /**
     * Returns Verifiable Credentials topic ID for this network.
     *
     * @return The VC topic ID.
     */
    getVcTopicId() {
        return sdk_1.TopicId.fromString(this.addressBook.getVcTopicId());
    }
    /**
     * Returns the address book of this identity network.
     *
     * @return The address book of this identity network.
     */
    getAddressBook() {
        return this.addressBook;
    }
    getVcStatusResolver(...args) {
        if (args.length === 0) {
            return new hcs_vc_status_resolver_1.HcsVcStatusResolver(this.getVcTopicId());
        }
        else if (args.length === 1) {
            const [publicKeysProvider] = args;
            return new hcs_vc_status_resolver_1.HcsVcStatusResolver(this.getVcTopicId(), publicKeysProvider);
        }
        else {
            throw Error('Invalid arguments');
        }
    }
    getVcTopicListener(...args) {
        if (args.length === 0) {
            return new hcs_vc_topic_listener_1.HcsVcTopicListener(this.getVcTopicId());
        }
        else if (args.length === 1) {
            const [publicKeysProvider] = args;
            return new hcs_vc_topic_listener_1.HcsVcTopicListener(this.getVcTopicId(), publicKeysProvider);
        }
        else {
            throw new Error('Invalid arguments');
        }
    }
}
exports.HcsIdentityNetwork = HcsIdentityNetwork;
